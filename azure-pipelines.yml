# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

stages:
- stage: env
  jobs:
    - job: Nodes
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '20.9.0'
        displayName: 'Install Node.js'

- stage: build
  jobs:
    - job: build_site
      steps:
        - task: NodeTool@0
          displayName: 'Install Node.js'
          inputs:
            versionSpec: '20.9.0' # The version we're installing
        - task: Npm@1
          inputs:
            command: 'ci'
          displayName: 'Install dependencies'
        - script: |
            npm run build
          displayName: 'Build'

        - script: |
            npx surge --project ./dist/browser --domain https://preview-${PullRequestNumber}-ng-zorro-antd.surge.sh
          condition: add(succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['isMaster'], false))
          displayName: 'Deploy to preview'
          env:
            PullRequestNumber: $(System.PullRequest.PullRequestNumber)
        - script: |
            npx surge --project ./dist/browser --domain https://nightly-ng-zorro-antd.surge.sh
          condition: and(succeeded(), eq(variables['Build.Reason'], 'Push'), eq(variables['isMaster'], true))
          displayName: 'Deploy to nightly'

        - script: |
            tar --transform='flags=r;s|browser|dist|' -cvzf build.tgz lib -C dist browser
          displayName: 'Compress build artifacts'
        - task: CopyFiles@2
          inputs:
            contents: build.tgz
            targetFolder: $(Build.ArtifactStagingDirectory)
          displayName: 'Copy archives to artifacts staging directory'
        - task: PublishBuildArtifacts@1
          inputs:
            path: $(Build.ArtifactStagingDirectory)
          displayName: 'Upload artifacts'

  dependsOn: env

- stage: test
  jobs:
    - job: test_components
      steps:
        - task: Npm@1
          inputs:
            command: 'ci'
          displayName: 'Install dependencies'
        - script: |
            npm run test
            cat ./coverage-report/lcov.info | ./node_modules/.bin/codecov
          displayName: 'Test'

        - task: PublishCodeCoverageResults@1
          displayName: 'publish code coverage results'
          condition: succeededOrFailed()
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage-report/cobertura-coverage.xml
            reportDirectory: $(System.DefaultWorkingDirectory)/coverage-report
            failIfCoverageEmpty: true

        - task: PublishTestResults@2
          displayName: 'publish test results'
          condition: succeededOrFailed()
          inputs:
            searchFolder: $(System.DefaultWorkingDirectory)/junit
            failTaskOnFailedTests: true
            testRunTitle: NG-ZORRO
            testResultsFormat: JUnit
            testResultsFiles: "**/TESTS*.xml"

    - job: test_schematics
      steps:
        - task: Npm@1
          inputs:
            command: 'ci'
          displayName: 'Install dependencies'
        - script: npm run test:schematics
          displayName: 'Test'

  dependsOn: env

- stage: lint
  jobs:
    - job: lint_components
      steps:
        - task: Npm@1
          inputs:
            command: 'ci'
          displayName: 'Install dependencies'
        - script: npm run lint
          displayName: 'Lint'
  dependsOn: env
